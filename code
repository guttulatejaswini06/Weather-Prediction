app.py:
from flask import Flask, render_template, jsonify, redirect, url_for, request, session
import json
import utils
app = Flask( name_)
app.config[SECRET_ KEY] = 'the random string'
with open(details.json', 'r) as f:
users = json.load()
news_list = utils.get _news()["articles"][:6]
class Post:
def init _(self, title, image_url):
self.title = title
self.image_url = image_url
posts = 0
for i in range(len(news_list):
posts.append(Post(news_list[]ltitle"], news_list[]["urlTolmage")
@app.route(", methods-[GET, "POST|)
def login():
if request.method =='POST':
global latitude
global longitude
# data = request.get_ json()
longitude = request.form[longitude]
latitude = request.form[latitude']
username = request.form[email']
password =request.form['password]
print('user {username) password {password} ")
if username in users.keys() and users[username] == password:
return redirect(url_for('weatherDetails)
error = 'Invalid username or password'
return render_template("'Login.html', error=error)
return render_template('Login.html')
@app.route('/signup', methods=[GET, 'POST])
def signup():
if request. method =='POST':
email = request.form['email]
password= request.form['password']
confirmPassword = request.form['confirm-password']
print(user {email} password {password} confirm passs {confirmPassword}')
usersemail] = password
with open(details.json', 'w) as jf.:
json.dump(users, j)
return redirect(url _for('login'))
return render_template(Signup.html')
@app.route(weatherDetails', methods=[GET, 'POST|)
def weatherDetails():
#send data in this format after reciving fron the api (converet the api data to this json
format and then send to front end)
data = utils.get_current_weather_data()
return render_template(Weather. html', data=data)
#@app.route(/floodzone', methods=['POST, 'GET)
# def floodzone():
return render_template(FloodZone.html' ,map=("map1": "", "map2": " ")
def get_map(zone):
maps ={
"flood Map": utils.get _flood_map().
"lake": utils.get_lake_zones().
"drainage": utils.get drinage lines().
print{col) :(dataļcol].unique()}")
return maps.get(zone, "default_map_url_if_zone_not found")
@app.route(/floodzone', methods-(POST, "GET])
def floodzone():
if request.method = 'POST:
selected zone = request.form.get('zone')
map_image_url = get _map(selected_zone)
return render_template(FloodZone. html', map=map_image_url)
else:
return render_template(FloodZone.html', map=None)
@app.route(lalert, methods-(POST", GET)
def alert():
return render_template(Alert.html, posts=posts)
#@app.route(/shelter, methods=[POST, 'GET])
# def Shelter():
# if request.method =='POST":
# print("POST METHOD INVOKED")
# return redirect(url _for('shelter_map_page')
## location = request.get_json()
## print(location['data'])
# # latitude, longitude = utils.get_lat_long_for_ip()
## map_html = utils.shelter_map(latitude, longitude)
# ## print(map_html)
## #return render_template('map.html', map=map_html)
##return jsonify(('map':map_html})
# return render_template('Shelter.html')
# location = request.get json()
# print(location[data])
# latitude, longitude = utils.get lat long_for ip()
# map_html = utils.shelter_map(latitude, longitude)
# print(map_html)
# return render_template('map2.html, map=map_html)
@app.route(/shelter, methods=[POST, GET))
def shelter():
if request.method == 'POST:
location_data = request.json # Assuming JSON data is sent
session['location_data'] = location_data # Store the data in session
return redirect(url _for('shelter_map_page'))
return render_template('Shelter.html')
@app.route(/shelter_map_page', methods=[GET)
def shelter_map_page():
location_data = session.get('location_data') # Retrieve the data from session
f location_data:
latitude, Iongitude = utils.get_lat long_for_ip()
map_html = utils.shelter_map(latitude, longitude)
return render_template('map.html, map=map_html)
return "No location data found", 404
@app.route('/sos' , methods=['POST GET|)
def sos():
if request.method==POST":
name = request.form['name]
situation = request.form['situation']
contact = request.form[contact]
utils.send_email(name, situation, contact)
return render_template('Sos.html')
if name ==" main:
app.run(debug=True)
utils.py
import requests
from datetime import datetime, timedelta
# from newsapi.newsapi_client import NewsApiClient
from email.message import EmailMessage
import ssl
import smtplib
from email.mime.image import MIMElmage
import folium
import random
import json
import pandas as pd
import os
from dotenv import load_dotenv
load_dotenv()
def get_current_weather_data(lat=13.069457, lon=80.215355):
now = datetime.now()
today_date = now.date()
current_day = now.strftime("%A")
APL KEY = "8cfc54d6b4cc06795c8e314dcb7de780"
url = f"https:/lapi.openweathermap.org/data/2.5/weather?lat-{lat)&lon={lon)&appid=
{APL KEY&units=metric"
response = requests.get(url).json()
sunrise_timestamp = response['sys'][sunrise]
sunset_timestamp = response[sys]['sunset]
# Convert to datetime objects
timezone _offset= 19800 #5.5 hours
# Convert to datetime objects in UTC
sunrise_time_utc = datetime.utcfromtimestamp(sunrise_timestamp)
sunset_time_utc = datetime.utcfromtimestamp(sunset_timestamp)
# Convert to local time by adding the timezone offset
sunrise time_local = sunrise _time_utc + timedelta(seconds=timezone_offset)
sunset_time_local = sunset_time_utc + timedelta(seconds=timezone_offset)
# Format the time in the desired format (e.g., "5:30 PM")
sunrise_formatted= sunrise_time_local.strftime("%1:%M %p")
sunset_formatted = sunset_time_local.strftime("%1:%M %p")
data= {
"temp": {response[main]['temp']", #give this in celcius only
"date": today_date,
"day": current_day,
"wind":f{response[wind]['speed10} km/hr",
"humidity": response[main][humidity],
"type": response[weather|[0|[description'],
"Sunrise":f{sunrise_formatted",
"Sunset":f{sunset_formattedy"
return data
from geopy.geocoders import Nominatim
def address_to_ lat_ Ing(address):
geolocator = Nominatim(user_agent="address_to_lat_Ing")
try:
location = geolocator.geocode(address)
if location:
lat = location.latitude
Ing = location. longitude
return lat, Ing
else:
print("Geocoding failed. Address not found.")
return None") , rectify if any errors are there and make it runnable . also give me the files as zip for project strucutre ("("my_flask_project/
│
├── app.py
├── utils.py
├── details.json          # You must create this with dummy data like {"user@example.com": "1234"}
├── templates/
│   ├── Login.html
│   ├── Signup.html
│   ├── Weather.html
│   ├── FloodZone.html
│   ├── Alert.html
│   ├── Shelter.html
│   └── map.html
├── static/
│   └── (any CSS/JS/image files you need)")
